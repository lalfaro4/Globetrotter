-- MySQL Script generated by MySQL Workbench
-- Tue Jul 27 17:08:40 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema GlobetrotterV1
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `GlobetrotterV1` ;

-- -----------------------------------------------------
-- Schema GlobetrotterV1
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GlobetrotterV1` DEFAULT CHARACTER SET utf8 ;
USE `GlobetrotterV1` ;

-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`location` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`location` (
  `location_id` VARCHAR(36) NOT NULL,
  `location_name` VARCHAR(255) NULL DEFAULT NULL,
  `address_line_1` VARCHAR(255) NULL DEFAULT NULL,
  `address_line_2` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(255) NULL DEFAULT NULL,
  `state` VARCHAR(255) NULL DEFAULT NULL,
  `country` VARCHAR(255) NULL DEFAULT NULL,
  `postal_code` VARCHAR(255) NULL DEFAULT NULL,
  `latitude` DECIMAL(10,7) NULL DEFAULT NULL,
  `longitude` DECIMAL(10,7) NULL DEFAULT NULL,
  PRIMARY KEY (`location_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`user` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`user` (
  `user_id` VARCHAR(36) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `email` (`email` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`registered_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`registered_user` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`registered_user` (
  `user` VARCHAR(36) NOT NULL,
  `username` VARCHAR(255) NOT NULL,
  `password_hashed` VARCHAR(255) NOT NULL,
  `first_name` VARCHAR(255) NULL,
  `last_name` VARCHAR(255) NULL,
  `birthday` DATE NULL,
  `gender` VARCHAR(255) NULL,
  `preferred_currency` VARCHAR(3) NULL DEFAULT NULL,
  `primary_phone_country_code` VARCHAR(2) NULL DEFAULT NULL,
  `primary_phone_number` VARCHAR(10) NULL DEFAULT NULL,
  `secondary_phone_country_code` VARCHAR(2) NULL DEFAULT NULL,
  `secondary_phone_number` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`user`),
  UNIQUE INDEX `username` (`username` ASC) VISIBLE,
  CONSTRAINT `FKregistered221452`
    FOREIGN KEY (`user`)
    REFERENCES `GlobetrotterV1`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`trip`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`trip` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`trip` (
  `owner` VARCHAR(36) NOT NULL,
  `trip_id` VARCHAR(36) NOT NULL,
  `trip_name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`owner`, `trip_id`),
  UNIQUE INDEX `trip_id` (`trip_id` ASC) VISIBLE,
  UNIQUE INDEX `trip_name` (`trip_name` ASC) VISIBLE,
  CONSTRAINT `FKtrip488903`
    FOREIGN KEY (`owner`)
    REFERENCES `GlobetrotterV1`.`registered_user` (`user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`activity` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`activity` (
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  `activity_id` VARCHAR(36) NOT NULL,
  `start_time` TIMESTAMP NOT NULL,
  `end_time` TIMESTAMP NOT NULL,
  `start_location` VARCHAR(36) NOT NULL,
  `end_location` VARCHAR(36) NULL DEFAULT NULL,
  PRIMARY KEY (`trip_owner`, `trip`, `activity_id`),
  UNIQUE INDEX `activity_id` (`activity_id` ASC) VISIBLE,
  INDEX `FKactivity647625` (`start_location` ASC) VISIBLE,
  INDEX `FKactivity775543` (`end_location` ASC) VISIBLE,
  CONSTRAINT `FKactivity647625`
    FOREIGN KEY (`start_location`)
    REFERENCES `GlobetrotterV1`.`location` (`location_id`),
  CONSTRAINT `FKactivity775543`
    FOREIGN KEY (`end_location`)
    REFERENCES `GlobetrotterV1`.`location` (`location_id`),
  CONSTRAINT `FKactivity816498`
    FOREIGN KEY (`trip_owner` , `trip`)
    REFERENCES `GlobetrotterV1`.`trip` (`owner` , `trip_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`service_provider`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`service_provider` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`service_provider` (
  `service_provider_id` VARCHAR(36) NOT NULL,
  `service_provider_name` VARCHAR(255) NOT NULL,
  `location` VARCHAR(36) NULL DEFAULT NULL,
  PRIMARY KEY (`service_provider_id`),
  INDEX `FKservice_pr758271` (`location` ASC) VISIBLE,
  CONSTRAINT `FKservice_pr758271`
    FOREIGN KEY (`location`)
    REFERENCES `GlobetrotterV1`.`location` (`location_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`airline`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`airline` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`airline` (
  `service_provider` VARCHAR(36) NOT NULL,
  `airline_code` VARCHAR(7) NOT NULL,
  PRIMARY KEY (`service_provider`, `airline_code`),
  UNIQUE INDEX `service_provider` (`service_provider` ASC) VISIBLE,
  UNIQUE INDEX `airline_code` (`airline_code` ASC) VISIBLE,
  CONSTRAINT `FKairline30762`
    FOREIGN KEY (`service_provider`)
    REFERENCES `GlobetrotterV1`.`service_provider` (`service_provider_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`airport`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`airport` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`airport` (
  `location` VARCHAR(36) NOT NULL,
  `iata_code` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`location`, `iata_code`),
  UNIQUE INDEX `location` (`location` ASC) VISIBLE,
  UNIQUE INDEX `iata_code` (`iata_code` ASC) VISIBLE,
  CONSTRAINT `FKairport228490`
    FOREIGN KEY (`location`)
    REFERENCES `GlobetrotterV1`.`location` (`location_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`currency_code`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`currency_code` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`currency_code` (
  `code` VARCHAR(3) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`code`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`file` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`file` (
  `owner` VARCHAR(36) NOT NULL,
  `file_id` VARCHAR(36) NOT NULL,
  `folder_path` VARCHAR(255) NOT NULL,
  `file_name` VARCHAR(255) NOT NULL,
  `extension` VARCHAR(5) NULL DEFAULT NULL,
  `full_file_path` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`owner`, `file_id`),
  UNIQUE INDEX `full_file_path` (`full_file_path` ASC) VISIBLE,
  CONSTRAINT `FKfile63262`
    FOREIGN KEY (`owner`)
    REFERENCES `GlobetrotterV1`.`registered_user` (`user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`flight_activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`flight_activity` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`flight_activity` (
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  `activity` VARCHAR(36) NOT NULL,
  `flight_offer_json_data` JSON NULL,
  PRIMARY KEY (`trip_owner`, `trip`, `activity`),
  UNIQUE INDEX `activity` (`activity` ASC) VISIBLE,
  CONSTRAINT `FKflight_act74694`
    FOREIGN KEY (`trip_owner` , `trip` , `activity`)
    REFERENCES `GlobetrotterV1`.`activity` (`trip_owner` , `trip` , `activity_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`guest_to_trip_association`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`guest_to_trip_association` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`guest_to_trip_association` (
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  `guest` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`trip_owner`, `trip`, `guest`),
  INDEX `FKguest_to_t184907` (`guest` ASC) VISIBLE,
  CONSTRAINT `FKguest_to_t161724`
    FOREIGN KEY (`trip_owner` , `trip`)
    REFERENCES `GlobetrotterV1`.`trip` (`owner` , `trip_id`)
    ON DELETE CASCADE,
  CONSTRAINT `FKguest_to_t184907`
    FOREIGN KEY (`guest`)
    REFERENCES `GlobetrotterV1`.`user` (`user_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`home_location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`home_location` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`home_location` (
  `user` VARCHAR(36) NOT NULL,
  `location` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`user`, `location`),
  UNIQUE INDEX `user` (`user` ASC) VISIBLE,
  INDEX `FKhome_locat943937` (`location` ASC) VISIBLE,
  CONSTRAINT `FKhome_locat112639`
    FOREIGN KEY (`user`)
    REFERENCES `GlobetrotterV1`.`registered_user` (`user`)
    ON DELETE CASCADE,
  CONSTRAINT `FKhome_locat943937`
    FOREIGN KEY (`location`)
    REFERENCES `GlobetrotterV1`.`location` (`location_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`hotel_activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`hotel_activity` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`hotel_activity` (
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  `activity` VARCHAR(36) NOT NULL,
  `hotel_offer_json_data` VARCHAR(4095) NOT NULL,
  PRIMARY KEY (`trip_owner`, `trip`, `activity`),
  UNIQUE INDEX `activity` (`activity` ASC) VISIBLE,
  CONSTRAINT `FKhotel_acti533323`
    FOREIGN KEY (`trip_owner` , `trip` , `activity`)
    REFERENCES `GlobetrotterV1`.`activity` (`trip_owner` , `trip` , `activity_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`photo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`photo` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`photo` (
  `file_owner` VARCHAR(36) NOT NULL,
  `file` VARCHAR(36) NOT NULL,
  `photo_id` VARCHAR(36) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  `is_profile_photo` TINYINT NULL DEFAULT NULL,
  PRIMARY KEY (`file_owner`, `file`, `photo_id`),
  UNIQUE INDEX `photo_id` (`photo_id` ASC) VISIBLE,
  INDEX `FK_PHOTO_FILE` (`file_owner` ASC, `file` ASC) VISIBLE,
  CONSTRAINT `FK_PHOTO_FILE`
    FOREIGN KEY (`file_owner` , `file`)
    REFERENCES `GlobetrotterV1`.`file` (`owner` , `file_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`photo_album`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`photo_album` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`photo_album` (
  `photo_album_id` VARCHAR(36) NOT NULL,
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`photo_album_id`, `trip_owner`, `trip`),
  UNIQUE INDEX `trip` (`trip` ASC) VISIBLE,
  UNIQUE INDEX `photo_album_id_UNIQUE` (`photo_album_id` ASC) VISIBLE,
  CONSTRAINT `FK_PHOTO_ALBUM_TRIP`
    FOREIGN KEY (`trip_owner` , `trip`)
    REFERENCES `GlobetrotterV1`.`trip` (`owner` , `trip_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`review` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`review` (
  `reviewer` VARCHAR(36) NOT NULL,
  `service_provider` VARCHAR(36) NOT NULL,
  `content` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`reviewer`, `service_provider`),
  INDEX `FKreview587606` (`service_provider` ASC) VISIBLE,
  CONSTRAINT `FKreview587606`
    FOREIGN KEY (`service_provider`)
    REFERENCES `GlobetrotterV1`.`service_provider` (`service_provider_id`),
  CONSTRAINT `FKreview785100`
    FOREIGN KEY (`reviewer`)
    REFERENCES `GlobetrotterV1`.`registered_user` (`user`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`service_record`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`service_record` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`service_record` (
  `trip_owner` VARCHAR(36) NOT NULL,
  `trip` VARCHAR(36) NOT NULL,
  `activity` VARCHAR(36) NOT NULL,
  `service_provider` VARCHAR(36) NOT NULL,
  `service_record_id` VARCHAR(36) NOT NULL,
  `json_data` VARCHAR(510) NULL DEFAULT NULL,
  PRIMARY KEY (`trip_owner`, `trip`, `activity`, `service_provider`, `service_record_id`),
  UNIQUE INDEX `service_record_id` (`service_record_id` ASC) VISIBLE,
  INDEX `FKservice_re130192` (`service_provider` ASC) VISIBLE,
  CONSTRAINT `FKservice_re130192`
    FOREIGN KEY (`service_provider`)
    REFERENCES `GlobetrotterV1`.`service_provider` (`service_provider_id`),
  CONSTRAINT `FKservice_re747461`
    FOREIGN KEY (`trip_owner` , `trip` , `activity`)
    REFERENCES `GlobetrotterV1`.`activity` (`trip_owner` , `trip` , `activity_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`photo_to_photo_album_association`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`photo_to_photo_album_association` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`photo_to_photo_album_association` (
  `owner` VARCHAR(36) NOT NULL,
  `photo` VARCHAR(36) NOT NULL,
  `photo_album` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`owner`, `photo`, `photo_album`),
  INDEX `FK_ALBUM_PHOTO_idx` (`photo` ASC) VISIBLE,
  INDEX `FK_ALBUM_PHOTO_ALBUM_idx` (`photo_album` ASC) VISIBLE,
  CONSTRAINT `FK_ALBUM_PHOTO`
    FOREIGN KEY (`photo`)
    REFERENCES `GlobetrotterV1`.`photo` (`photo_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_ALBUM_PHOTO_ALBUM`
    FOREIGN KEY (`photo_album`)
    REFERENCES `GlobetrotterV1`.`photo_album` (`photo_album_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GlobetrotterV1`.`invited_user_to_photo_album_association`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`invited_user_to_photo_album_association` ;

CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`invited_user_to_photo_album_association` (
  `invited_user` VARCHAR(36) NOT NULL,
  `photo_album` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`invited_user`, `photo_album`),
  INDEX `FK_ASSOCIATION_TO_PHOTO_ALBUM_idx` (`photo_album` ASC) VISIBLE,
  CONSTRAINT `FK_ASSOCIATION_TO_REGISTERED_USER`
    FOREIGN KEY (`invited_user`)
    REFERENCES `GlobetrotterV1`.`registered_user` (`user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_ASSOCIATION_TO_PHOTO_ALBUM`
    FOREIGN KEY (`photo_album`)
    REFERENCES `GlobetrotterV1`.`photo_album` (`photo_album_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `GlobetrotterV1` ;

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`airline_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`airline_view` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`airport_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`airport_view` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`trip_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`trip_view` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`activity_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`activity_view` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`flight_activity_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`flight_activity_view` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`photo_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`photo_view` (`trip` INT, `photo_album_id` INT, `photo_id` INT, `file_id` INT, `title` INT, `description` INT, `full_file_path` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`registered_user_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`registered_user_view` (`first_name` INT, `last_name` INT, `gender` INT, `username` INT, `password_hashed` INT, `birthday` INT, `address_line_1` INT, `address_line_2` INT, `city` INT, `state` INT, `country` INT, `postal_code` INT, `CONCAT(primary_phone_country_code,'',primary_phone_number)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `GlobetrotterV1`.`invited_users_to_photo_album_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GlobetrotterV1`.`invited_users_to_photo_album_view` (`id` INT);

-- -----------------------------------------------------
-- procedure usp_create_activity
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_activity`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_activity`(
	IN p_trip_owner VARCHAR(36),
	IN p_trip VARCHAR(36),
	IN p_start_time TIMESTAMP,
	IN p_end_time TIMESTAMP,
	IN p_start_location VARCHAR(36),
	IN p_end_location VARCHAR(36),
    OUT o_activity_id VARCHAR(36)
)
BEGIN
	DECLARE v_uuid VARCHAR(36);
	DECLARE v_trip VARCHAR(36);
	SELECT trip_id INTO v_trip FROM trip WHERE trip.trip_id = p_trip;
	SELECT uuid() INTO v_uuid;
	IF ISNULL(v_trip) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Cannot create activity for trip that does not exist.';
	ELSE
		INSERT INTO activity (trip_owner, trip, activity_id, start_time, end_time, start_location, end_location) VALUES (p_trip_owner, p_trip, v_uuid, p_start_time, p_end_time, p_start_location, p_end_location);
	END IF;
    SET o_activity_id = v_uuid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_airline
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_airline`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_airline`(
	IN p_iata_code VARCHAR(7),
	IN p_airline_name VARCHAR(255)	
)
BEGIN
	DECLARE v_uuid VARCHAR(36);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
	START TRANSACTION;
		SELECT uuid() INTO v_uuid;
		INSERT INTO service_provider (service_provider_id, service_provider_name) VALUES (v_uuid, p_airline_name);
		INSERT INTO airline (airline_code, service_provider) VALUES (p_iata_code, v_uuid);
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_airport
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_airport`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_airport`(
	IN p_airport_name VARCHAR(255),
	IN p_city VARCHAR(255),
    IN p_state VARCHAR(3),
	IN p_country VARCHAR(2),
	IN p_iata_code VARCHAR(3),
	IN p_latitude DECIMAL(10, 7),
	IN p_longitude DECIMAL(10, 7)	
)
BEGIN
	DECLARE v_uuid VARCHAR(36);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
	START TRANSACTION;
		SELECT uuid() INTO v_uuid;
		INSERT INTO location (location_id, location_name, city, state, country, latitude, longitude) VALUES (v_uuid, p_airport_name, p_city, p_state, p_country, p_latitude, p_longitude);
		INSERT INTO airport (location, iata_code) VALUES (v_uuid, p_iata_code);
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_review
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_review`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_review`(
	IN p_reviewer VARCHAR(36),
	IN p_review_content VARCHAR(255),
	IN p_service_provider VARCHAR(36)
)
BEGIN
	DECLARE v_uuid VARCHAR(36);
	SELECT uuid() INTO v_uuid;
	INSERT INTO review (reviewer, content, service_provider) VALUES (p_reviewer, p_review_content, p_service_provider);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_trip
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_trip`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_trip`(
	IN p_owner VARCHAR(36),
	IN p_trip_name VARCHAR(255),
    OUT o_trip_id VARCHAR(36),
    OUT o_album_id VARCHAR(36)
)
BEGIN
	DECLARE v_user VARCHAR(36);
	DECLARE v_uuid VARCHAR(36);
    DECLARE v_photo_album_id VARCHAR(36);
    SELECT `user` INTO v_user FROM registered_user WHERE registered_user.`user` = p_owner;
	SELECT uuid() INTO v_uuid;
    SELECT uuid() INTO v_photo_album_id;
	IF ISNULL(v_user) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Cannot create trip for registered_user that does not exist.';
	ELSE
		INSERT INTO trip (`owner`, trip_id, trip_name) VALUES (p_owner, v_uuid, p_trip_name);
        INSERT INTO photo_album (photo_album_id, trip_owner, trip) VALUES (v_photo_album_id, p_owner, v_uuid);
	END IF;
    SET o_trip_id = v_uuid;
    SET o_album_id = v_photo_album_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_delete_activity
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_delete_activity`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_delete_activity`(
	IN p_activity_id VARCHAR(36)
)
BEGIN
	DELETE FROM activity WHERE activity.activity_id = p_activity_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_delete_review
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_delete_review`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_delete_review`(
	IN p_review_id VARCHAR(36)
)
BEGIN
	DELETE FROM review WHERE review.review_id = p_review_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_delete_trip
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_delete_trip`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_delete_trip`(
	IN p_trip_id VARCHAR(36)
)
BEGIN
	DELETE FROM trip WHERE trip.trip_id = p_trip_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_user
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_user`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_user`(
	IN p_email VARCHAR(255),
    OUT o_user_id VARCHAR(36)
)
BEGIN
	DECLARE v_uuid VARCHAR(36);
	SELECT uuid() INTO v_uuid;
	INSERT INTO `user` (user_id, email) VALUES (v_uuid, p_email);
    SET o_user_id = v_uuid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_register_user
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_register_user`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_register_user`(
	IN p_email VARCHAR(255),
    IN p_username VARCHAR(255),
    IN p_password_hashed VARCHAR(255),
    IN p_first_name VARCHAR(255),
    IN p_last_name VARCHAR(255),
    IN p_birthday DATE,
    IN p_gender VARCHAR(255),
	IN p_preferred_currency VARCHAR(3),
    IN p_address_line_1 VARCHAR(255),
    IN p_address_line_2 VARCHAR(255),
    IN p_city VARCHAR(255),
    IN p_state VARCHAR(255),
    IN p_country VARCHAR(255),
    IN p_postal_code VARCHAR(255),
	IN p_primary_phone_country_code VARCHAR(2),
    IN p_primary_phone_number VARCHAR(10),
    OUT o_user_id VARCHAR(36)
)
BEGIN
    DECLARE v_user_id VARCHAR(36);
    SELECT `user_id` INTO v_user_id FROM `user` WHERE `user`.email = p_email;
    IF (v_user_id IS NULL) THEN
		CALL usp_create_user(p_email, v_user_id);
    END IF;
	INSERT INTO registered_user (`user`, username, password_hashed, first_name, last_name, birthday, gender, preferred_currency,
		primary_phone_country_code, primary_phone_number)
        VALUES (v_user_id, p_username, p_password_hashed, p_first_name, p_last_name, p_birthday, p_gender, p_preferred_currency, 
			p_primary_phone_country_code, p_primary_phone_number);
	CALL usp_create_home_location(v_user_id, p_address_line_1, p_address_line_2, p_city, p_state, p_country, p_postal_code);
	SET o_user_id = v_user_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_home_location
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_home_location`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_home_location`(
	IN p_user_id VARCHAR(36),
	IN p_address_line_1 VARCHAR(255),
    IN p_address_line_2 VARCHAR(255),
    IN p_city VARCHAR(255),
    IN p_state VARCHAR(255),
	IN p_country VARCHAR(255),
	IN p_postal_code VARCHAR(255)	
)
BEGIN
	DECLARE v_location_uuid VARCHAR(36);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
	START TRANSACTION;
		SELECT uuid() INTO v_location_uuid;
        INSERT INTO location (location_id, address_line_1, address_line_2, city, state, country, postal_code)
			VALUES (v_location_uuid, p_address_line_1, p_address_line_2, p_city, p_state, p_country, p_postal_code);
		INSERT INTO home_location (`user`, location) VALUES (p_user_id, v_location_uuid);
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_flight_activity
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_flight_activity`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_flight_activity`(
	IN p_trip_owner VARCHAR(36),
	IN p_trip VARCHAR(36),
	IN p_start_time TIMESTAMP,
	IN p_end_time TIMESTAMP,
	IN p_start_location VARCHAR(36),
	IN p_end_location VARCHAR(36),
    IN p_flight_offer_json_data JSON,
    OUT o_activity_id VARCHAR(36)
)
BEGIN
    DECLARE v_activity_id VARCHAR(36);
    CALL usp_create_activity(p_trip_owner, p_trip, p_start_time, p_end_time, p_start_location, p_end_location, v_activity_id);
	INSERT INTO flight_activity (trip_owner, trip, activity, flight_offer_json_data) VALUES (p_trip_owner, p_trip, v_activity_id, p_flight_offer_json_data);
	SET o_activity_id = v_activity_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_file
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_file`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_file` (
	IN p_owner VARCHAR(45),
    IN p_folder_path VARCHAR(255),
    IN p_file_name VARCHAR(255),
    IN p_extension VARCHAR(5),
    OUT o_file_id VARCHAR(45)
)
BEGIN
	DECLARE v_file_id VARCHAR(45);
    SELECT uuid() INTO v_file_id;
    INSERT INTO `file` (`owner`, file_id, folder_path, file_name, extension, full_file_path) 
		VALUES (p_owner, v_file_id, p_folder_path, p_file_name, p_extension, CONCAT(p_folder_path, p_file_name, '.', p_extension));
	SET o_file_id = v_file_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_create_photo
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_create_photo`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_create_photo` (
	IN p_owner VARCHAR(45),
    IN p_folder_path VARCHAR(255),
    IN p_file_name VARCHAR(255),
    IN p_extension VARCHAR(5),
    IN p_title VARCHAR(45),
    IN p_description VARCHAR(255),
    IN p_is_profile_photo TINYINT,
    OUT o_photo_id VARCHAR(45)
)
BEGIN
	DECLARE v_file_id VARCHAR(45);
    DECLARE v_photo_id VARCHAR(45);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS;
		ROLLBACK;
	END;
    SELECT uuid() INTO v_photo_id;
	START TRANSACTION;
		CALL usp_create_file(p_owner, p_folder_path, p_file_name, p_extension, v_file_id);
        INSERT INTO photo (file_owner, `file`, photo_id, title, `description`, is_profile_photo)
			VALUES (p_owner, v_file_id, v_photo_id, p_title, p_description, p_is_profile_photo);
		SET o_photo_id = v_photo_id;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_add_photo_to_album
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_add_photo_to_album`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_add_photo_to_album` (
	IN p_photo_id VARCHAR(36),
    IN p_trip_id VARCHAR(36)
)
BEGIN
	DECLARE v_photo_album_id VARCHAR(36);
    DECLARE v_trip_owner_id VARCHAR(36);
	SELECT photo_album_id, trip_owner INTO v_photo_album_id, v_trip_owner_id FROM photo_album WHERE photo_album.trip = p_trip_id;
	INSERT INTO photo_to_photo_album_association (`owner`, photo, photo_album) VALUES (v_trip_owner_id, p_photo_id, v_photo_album_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_update_trip
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_update_trip`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_update_trip` (

)
BEGIN

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_invite_to_photo_album
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_invite_to_photo_album`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_invite_to_photo_album` (
	IN p_invited_user VARCHAR(36),
	IN p_photo_album VARCHAR(36)
    )
BEGIN
	SET @invitee := (SELECT user FROM registered_user WHERE p_invited_user = registered_user.username);
	INSERT INTO invited_user_to_photo_album_association (invited_user, photo_album) VALUES (@invitee, p_photo_album);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_update_user_password
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_update_user_password`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_update_user_password` (
IN p_username varchar(36),
IN p_email varchar(36),
IN p_password varchar(255)
)
BEGIN
	DECLARE v_user varchar(36);
    DECLARE v_user_from_email varchar(36);
    DECLARE v_username varchar(36);
    
	SELECT `user`, username INTO v_user, v_username FROM registered_user WHERE registered_user.username = p_username; 
    SELECT user_id INTO v_user_from_email FROM user WHERE user.email = p_email;
	IF ISNULL(v_user) OR v_user_from_email != v_user THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Cannot update password for user with that username and password.';
	ELSE
    UPDATE registered_user SET password_hashed = p_password WHERE registered_user.username = p_username; 
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_update_user_information
-- -----------------------------------------------------

USE `GlobetrotterV1`;
DROP procedure IF EXISTS `GlobetrotterV1`.`usp_update_user_information`;

DELIMITER $$
USE `GlobetrotterV1`$$
CREATE PROCEDURE `usp_update_user_information` (
IN p_user varchar(36),
IN p_username varchar(255),
IN p_email varchar(255),
IN p_birthday DATE,
IN p_city varchar(255),
IN p_postal_code varchar(255),
IN p_home_state varchar(255),
IN p_address_line_1 varchar(255),
IN p_primary_phone_number varchar(10),
IN p_secondary_phone_number varchar(10)
)
BEGIN
	DECLARE v_user varchar(36);
    DECLARE v_location varchar(36);
    
	SElECT `user` INTO v_user FROM registered_user WHERE user = p_user;
    SElECT location INTO v_location FROM home_location WHERE user = p_user;
	IF ISNULL(v_user) OR ISNULL(v_location) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Cannot update information for registered user or location that does not exist.';
	ELSE
		UPDATE registered_user SET username = p_username, primary_phone_number = p_primary_phone_number, secondary_phone_number = p_secondary_phone_number, birthday = p_birthday WHERE user = p_user; 
        UPDATE user SET email = p_email WHERE user.user_id = p_user;
        UPDATE location SET postal_code = p_postal_code, state = p_home_state, city = p_city, address_line_1 = p_address_line_1 WHERE location.location_id = v_location;
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`airline_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`airline_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`airline_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `airline_view` AS (
	SELECT service_provider_id, service_provider_name, airline_code FROM service_provider INNER JOIN airline ON service_provider.service_provider_id = airline.service_provider
);

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`airport_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`airport_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`airport_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `airport_view` AS (
	SELECT location_id, location_name, iata_code FROM location INNER JOIN airport ON location.location_id = airport.location
);

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`trip_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`trip_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`trip_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `trip_view` AS (
	SELECT trip_id, username, trip_name FROM trip INNER JOIN registered_user WHERE trip.`owner` = registered_user.user
);

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`activity_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`activity_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`activity_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `activity_view` AS (
    SELECT trip_id, 
		activity_id,
        date_format(start_time, '%Y-%m-%d') AS start_date,
        time(start_time) AS start_time,
		date_format(end_time, '%Y-%m-%d') AS end_date,
        time(end_time) AS end_time,
		origin.location_id AS origin_id, 
		origin.location_name AS origin_name, 
        destination.location_id AS destination_id, 
		destination.location_name AS destination_name 
    FROM activity 
		INNER JOIN trip ON activity.trip = trip.trip_id 
		INNER JOIN registered_user 
			ON trip.`owner` = registered_user.`user` 
        INNER JOIN location AS origin 
			ON origin.location_id = start_location 
		INNER JOIN location AS destination  
			ON destination.location_id = end_location 
		ORDER BY start_date, start_time
);

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`flight_activity_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`flight_activity_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`flight_activity_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `flight_activity_view` AS (
    SELECT trip_id, 
		activity_id, 
        start_date AS departure_date, 
		start_time AS departure_time, 
        end_date AS arrival_date, 
		end_time AS arrival_time, 
        origin_id, 
		origin_airport.iata_code AS origin_airport_code, 
        origin_name, 
        destination_id, 
        destination_airport.iata_code AS destination_airport_code, 
        destination_name, 
        flight_offer_json_data 
	FROM flight_activity 
    INNER JOIN activity_view 
		ON activity_view.activity_id = activity 
	INNER JOIN airport AS origin_airport 
		ON origin_airport.location = origin_id  
	INNER JOIN airport AS destination_airport 
		ON destination_airport.location = destination_id
	ORDER BY start_date, start_time
);

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`photo_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`photo_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`photo_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `photo_view` AS select trip, photo_album_id, photo_id, file_id, title, `description`, full_file_path from photo inner join `file` on file_id = `file` inner join photo_to_photo_album_association on photo = photo_id inner join photo_album on photo_album = photo_album_id;

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`registered_user_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`registered_user_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`registered_user_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `registered_user_view` AS select first_name, last_name, gender, username, password_hashed, birthday, address_line_1, address_line_2, city, state, country, postal_code, CONCAT(primary_phone_country_code,'',primary_phone_number) from registered_user inner join home_location on home_location.user = registered_user.user inner join location on home_location.location = location.location_id;

-- -----------------------------------------------------
-- View `GlobetrotterV1`.`invited_users_to_photo_album_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GlobetrotterV1`.`invited_users_to_photo_album_view`;
DROP VIEW IF EXISTS `GlobetrotterV1`.`invited_users_to_photo_album_view` ;
USE `GlobetrotterV1`;
CREATE  OR REPLACE VIEW `invited_users_to_photo_album_view` AS (
SELECT * FROM invited_user_to_photo_album_association 
INNER JOIN registered_user ON invited_user_to_photo_album_association.`invited_user` = registered_user.user
INNER JOIN photo_album ON invited_user_to_photo_album_association.`photo_album` = photo_album.photo_album_id
);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
